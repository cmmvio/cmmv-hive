{
  "mcpServers": {
    "cursor-voting-orchestrator": {
      "command": "python",
      "args": ["scripts/mcp/cursor_voting_orchestrator.py"],
      "env": {
        "PYTHONPATH": ".",
        "MCP_CONFIG_PATH": ".cursor/mcp_config.json"
      }
    },
    "cursor-proposal-analyzer": {
      "command": "python",
      "args": ["scripts/mcp/cursor_proposal_analyzer.py"],
      "env": {
        "PYTHONPATH": ".",
        "MCP_CONFIG_PATH": ".cursor/mcp_config.json"
      }
    }
  },

  "commands": {
    "cursor-vote": {
      "description": "Trigger automated voting on a proposal",
      "usage": "cursor-vote --proposal <file> --models <group>",
      "examples": [
        "cursor-vote --proposal discussion/019-new-feature.md --models generals",
        "cursor-vote --proposal bips/pending/BIP-019.md --models all"
      ]
    },
    "cursor-analyze": {
      "description": "Analyze proposal with multiple models",
      "usage": "cursor-analyze --file <proposal> --models <group> --analysis-type <type>",
      "examples": [
        "cursor-analyze --file discussion/019-new-feature.md --models generals --analysis-type technical",
        "cursor-analyze --file bips/pending/BIP-019.md --models all --analysis-type comprehensive"
      ]
    },
    "cursor-models": {
      "description": "Check model availability and status",
      "usage": "cursor-models --status --available",
      "examples": [
        "cursor-models --status",
        "cursor-models --available --group generals"
      ]
    },
    "cursor-feedback": {
      "description": "Collect specific feedback type from models",
      "usage": "cursor-feedback --type <feedback_type> --proposal <file> --models <group>",
      "examples": [
        "cursor-feedback --type voting --proposal BIP-019.md --models collaborators",
        "cursor-feedback --type security_review --proposal discussion/019.md --models all"
      ]
    }
  },

  "modelGroups": {
    "all": "All available models (28 total: Cursor + Manual)",
    "generals": "High-capacity general models (16 models)",
    "collaborators": "Specialist/smaller models (12 models)",
    "cursor_only": "All Cursor-available models (25 models)",
    "cursor_tested": "Already tested in project (9 models)",
    "cursor_available": "Available but not tested (16 models)",
    "anthropic_only": "Anthropic models only (4 Claude models)",
    "openai_only": "OpenAI models only (5 GPT models)",
    "google_only": "Google models only (4 Gemini models)",
    "meta_only": "Meta models only (4 Llama/CodeLlama models)",
    "xai_only": "xAI models only (2 Grok models)",
    "deepseek_only": "DeepSeek models only (3 DeepSeek models)",
    "mistral_only": "Mistral models only (2 Mistral models)",
    "alibaba_only": "Alibaba models only (2 Qwen models)",
    "microsoft_only": "Microsoft models only (1 Phi-3 model)",
    "bigcode_only": "BigCode models only (1 StarCoder model)"
  },

  "analysisTypes": {
    "technical": "Technical feasibility analysis",
    "security": "Security implications review",
    "impact": "Project impact assessment",
    "implementation": "Implementation complexity evaluation",
    "consensus": "Consensus potential analysis",
    "comprehensive": "Full multi-dimensional analysis"
  },

  "settings": {
    "defaultTimeout": 300,
    "maxConcurrentRequests": 5,
    "retryAttempts": 3,
    "outputDirectory": "automation_results",
    "logLevel": "INFO",

    "voting": {
      "requiredQuorum": 0.6,
      "defaultThreshold": 0.5,
      "timeoutDays": 7,
      "reminderIntervalHours": 24
    },

    "analysis": {
      "confidenceThreshold": 0.7,
      "maxAnalysisLength": 2000,
      "requiredAnalysisTypes": ["technical", "security", "impact"]
    },

    "ui": {
      "showProgressBars": true,
      "enableNotifications": true,
      "autoSaveReports": true,
      "colorOutput": true
    }
  },

  "integrations": {
    "github": {
      "autoCreateIssues": false,
      "autoCreatePRs": false,
      "linkReports": true
    },
    "slack": {
      "webhookUrl": null,
      "notifyOnCompletion": false
    },
    "discord": {
      "webhookUrl": null,
      "notifyOnCompletion": false
    }
  },

  "metadata": {
    "version": "1.1.0",
    "created": "2024-12-21T19:30:00Z",
    "updated": "2024-12-21T20:00:00Z",
    "author": "Claude Code Assistant",
    "description": "MCP Cursor Integration for LLM Consensus Gate automation - Updated with 28 models",
    "project": "cmmv-hive",
    "license": "MIT",
    "model_stats": {
      "total_models": 28,
      "cursor_tested": 9,
      "cursor_available": 16,
      "manual_required": 6,
      "providers": ["Anthropic", "OpenAI", "Google", "Meta", "xAI", "DeepSeek", "Mistral", "Alibaba", "Microsoft", "BigCode"],
      "last_model_update": "2024-12-21T20:00:00Z"
    }
  }
}
