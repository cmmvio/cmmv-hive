name: Consensus Gate
on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]
    branches: [ main, develop ]

jobs:
  consensus:
    permissions:
      contents: read
      pull-requests: read
      issues: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Compute consensus
        uses: actions/github-script@v7
        id: consensus
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const core = require('@actions/core');

            // ============================================================================
            // CONFIGURATION VALIDATION
            // ============================================================================

            core.info('üîç Validating consensus configuration...');

            // Load and validate generals file
            const generalsPath = path.join(process.cwd(), '.consensus', 'generals.txt');
            if (!fs.existsSync(generalsPath)) {
              core.setFailed(`‚ùå Missing .consensus/generals.txt file. Please create this file with the list of general usernames.`);
              return;
            }

            const generalsContent = fs.readFileSync(generalsPath, 'utf8');
            const generals = generalsContent
              .split(/\r?\n/)
              .map(l => l.trim())
              .filter(l => l && !l.startsWith('#'))
              .map(l => l.toLowerCase());

            if (generals.length === 0) {
              core.setFailed('‚ùå No generals configured in .consensus/generals.txt. Please add at least one general username.');
              return;
            }

            core.info(`‚úÖ Loaded ${generals.length} generals: ${generals.join(', ')}`);

            // ============================================================================
            // PR CONTEXT ANALYSIS
            // ============================================================================

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prAuthor = context.payload.pull_request.user.login;

            core.info(`üìã Analyzing PR #${prNumber}: "${prTitle}" by @${prAuthor}`);

            // ============================================================================
            // THRESHOLD CALCULATION
            // ============================================================================

            const labels = context.payload.pull_request.labels.map(l => l.name.toLowerCase());
            const hasCoreLabel = labels.includes('core');
            const hasSkipConsensusLabel = labels.includes('skip-consensus');
            const hasHotfixLabel = labels.includes('hotfix');

            // Skip consensus for hotfix or skip-consensus labels
            if (hasSkipConsensusLabel || hasHotfixLabel) {
              core.notice(`‚è≠Ô∏è  Skipping consensus check due to '${hasSkipConsensusLabel ? 'skip-consensus' : 'hotfix'}' label`);
              return;
            }

            const threshold = hasCoreLabel ? 0.8 : 0.6;
            core.info(`üéØ Threshold set to ${threshold} (${hasCoreLabel ? 'CORE' : 'STANDARD'} mode)`);

            // ============================================================================
            // VOTE COLLECTION AND ANALYSIS
            // ============================================================================

            core.info('üó≥Ô∏è  Collecting votes from generals...');

            // Fetch all issue comments on the PR
            const comments = await github.paginate(
              github.rest.issues.listComments,
              { owner, repo, issue_number: prNumber, per_page: 100 }
            );

            core.info(`üìù Found ${comments.length} total comments on PR`);

            // Parse votes from generals with enhanced validation
            let votes = [];
            let invalidVotes = [];

            for (const c of comments) {
              const author = (c.user && c.user.login || '').toLowerCase();
              if (!generals.includes(author)) continue;

              const body = (c.body || '').toLowerCase();
              const commentId = c.id;
              const createdAt = c.created_at;

              // Enhanced vote parsing with confidence and priority
              let decision = null;
              let confidence = 'medium';
              let priority = 'medium';
              let reason = '';

              if (body.includes('vote: approve')) {
                decision = 'approve';
              } else if (body.includes('vote: reject')) {
                decision = 'reject';
              }

              // Extract additional metadata
              if (body.includes('confidence: high')) confidence = 'high';
              if (body.includes('confidence: low')) confidence = 'low';
              if (body.includes('priority: high')) priority = 'high';
              if (body.includes('priority: low')) priority = 'low';

              // Extract reason
              const reasonMatch = body.match(/reason:\s*(.+?)(?:\n|$)/i);
              if (reasonMatch) reason = reasonMatch[1].trim();

              if (decision) {
                votes.push({
                  author,
                  decision,
                  confidence,
                  priority,
                  reason,
                  commentId,
                  createdAt,
                  timestamp: new Date(createdAt).getTime()
                });
                core.info(`‚úÖ Valid vote from @${author}: ${decision.toUpperCase()} (${confidence} confidence)`);
              } else {
                invalidVotes.push({ author, commentId, body: body.substring(0, 100) + '...' });
                core.warning(`‚ö†Ô∏è  Invalid vote format from @${author} in comment ${commentId}`);
              }
            }

            // ============================================================================
            // VOTE PROCESSING AND DEDUPLICATION
            // ============================================================================

            // Sort votes by timestamp (newest first) and deduplicate by author
            votes.sort((a, b) => b.timestamp - a.timestamp);
            const latestByAuthor = new Map();
            for (const v of votes) {
              if (!latestByAuthor.has(v.author)) {
                latestByAuthor.set(v.author, v);
              }
            }
            const latestVotes = Array.from(latestByAuthor.values());

            // ============================================================================
            // CONSENSUS CALCULATION
            // ============================================================================

            const totalGenerals = generals.length;
            const approvals = latestVotes.filter(v => v.decision === 'approve').length;
            const rejections = latestVotes.filter(v => v.decision === 'reject').length;
            const participation = latestVotes.length;
            const participationRate = participation / totalGenerals;
            const ratio = approvals / totalGenerals;

            // Calculate consensus strength
            let consensusStrength = 'weak';
            if (participationRate >= 0.8 && ratio >= threshold) consensusStrength = 'strong';
            else if (participationRate >= 0.6 && ratio >= threshold) consensusStrength = 'moderate';

            // ============================================================================
            // DETAILED REPORTING
            // ============================================================================

            core.summary
              .addHeading('ü§ñ LLM Hive Consensus Gate')
              .addRaw('<p><strong>Analysis for PR #' + prNumber + '</strong></p>')
              .addTable([
                [{data:'Total Generals',header:true}, String(totalGenerals)],
                [{data:'Participation',header:true}, `${participation}/${totalGenerals} (${(participationRate * 100).toFixed(1)}%)`],
                [{data:'Approvals',header:true}, String(approvals)],
                [{data:'Rejections',header:true}, String(rejections)],
                [{data:'Approval Ratio',header:true}, `${(ratio * 100).toFixed(1)}%`],
                [{data:'Threshold',header:true}, `${(threshold * 100).toFixed(1)}%`],
                [{data:'Consensus Strength',header:true}, consensusStrength.toUpperCase()],
                [{data:'Core Changes',header:true}, hasCoreLabel ? 'YES' : 'NO'],
              ]);

            // Add detailed vote breakdown
            if (latestVotes.length > 0) {
              core.summary.addHeading('üìä Detailed Vote Breakdown');

              const voteDetails = latestVotes.map(v => [
                {data: `@${v.author}`, header: true},
                v.decision.toUpperCase(),
                v.confidence.toUpperCase(),
                v.priority.toUpperCase(),
                v.reason || 'No reason provided'
              ]);

              core.summary.addTable([
                [{data:'General',header:true}, {data:'Decision',header:true}, {data:'Confidence',header:true}, {data:'Priority',header:true}, {data:'Reason',header:true}],
                ...voteDetails
              ]);
            }

            // Add invalid votes section if any
            if (invalidVotes.length > 0) {
              core.summary.addHeading('‚ö†Ô∏è Invalid Vote Formats');
              const invalidDetails = invalidVotes.map(v => [
                {data: `@${v.author}`, header: true},
                `Comment #${v.commentId}`,
                v.body
              ]);

              core.summary.addTable([
                [{data:'General',header:true}, {data:'Comment',header:true}, {data:'Content Preview',header:true}],
                ...invalidDetails
              ]);
            }

            // Add recommendations
            core.summary.addHeading('üí° Recommendations');
            let recommendations = [];

            if (participationRate < 0.5) {
              recommendations.push('‚ö†Ô∏è Low participation rate - consider adding more generals or waiting for more votes');
            }

            if (ratio < threshold && ratio > 0.3) {
              recommendations.push('ü§î Close to threshold - consider requesting additional reviews from generals');
            }

            if (invalidVotes.length > 0) {
              recommendations.push('üìù Some votes have invalid format - check the voting guide in README');
            }

            if (recommendations.length === 0) {
              recommendations.push('‚úÖ All systems go - consensus achieved successfully');
            }

            core.summary.addRaw('<ul>' + recommendations.map(r => `<li>${r}</li>`).join('') + '</ul>');

            core.summary.write();

            // ============================================================================
            // FINAL DECISION
            // ============================================================================

            const passed = ratio >= threshold;

            if (passed) {
              core.notice(`‚úÖ CONSENSUS PASSED: ${(ratio * 100).toFixed(1)}% >= ${(threshold * 100).toFixed(1)}% (${consensusStrength} strength)`);

              // Set output for other jobs
              core.setOutput('consensus_status', 'passed');
              core.setOutput('approval_ratio', ratio.toFixed(3));
              core.setOutput('consensus_strength', consensusStrength);
            } else {
              const message = `‚ùå CONSENSUS FAILED: ${(ratio * 100).toFixed(1)}% < ${(threshold * 100).toFixed(1)}% threshold\n` +
                             `Need ${Math.ceil(totalGenerals * threshold)} approvals, got ${approvals}`;
              core.setFailed(message);

              // Set output for other jobs
              core.setOutput('consensus_status', 'failed');
              core.setOutput('approval_ratio', ratio.toFixed(3));
              core.setOutput('missing_approvals', Math.ceil(totalGenerals * threshold) - approvals);
            }

      - name: Verify Security Signatures
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          python scripts/verify_signatures.py
          echo "üîê Security signatures verified"
        
      - name: Encrypt Sensitive Votes
        if: ${{ contains(github.event.pull_request.labels.*.name, 'confidential') }}
        run: |
          python scripts/vote_encryption.py --encrypt
          echo "üîí Votes encrypted for confidential PR"