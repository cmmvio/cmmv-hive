name: BIP Voting Process

on:
  push:
    paths:
      - 'bips/pending/**'
  issue_comment:
    types: [created]
  schedule:
    # Check for voting timeouts every 6 hours
    - cron: '0 */6 * * *'

jobs:
  # Job 1: Submit BIP for voting when pushed to pending
  submit-bip:
    if: github.event_name == 'push' && contains(github.event.head_commit.modified, 'bips/pending/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yq
          pip install PyYAML

      - name: Get BIP file
        id: bip-file
        run: |
          # Find the BIP file that was modified
          BIP_FILE=$(git diff --name-only HEAD~1 | grep "bips/pending/" | head -1)
          echo "bip_file=$BIP_FILE" >> $GITHUB_OUTPUT

      - name: Validate and submit BIP
        if: steps.bip-file.outputs.bip_file
        run: |
          chmod +x scripts/voting/submit_bip.sh
          ./scripts/voting/submit_bip.sh "${{ steps.bip-file.outputs.bip_file }}"

      - name: Notify models to vote
        if: steps.bip-file.outputs.bip_file
        run: |
          # This would trigger notifications to all enabled models
          # In a real implementation, this could send webhooks, emails, etc.
          echo "BIP submitted successfully - models will be notified to vote"

  # Job 2: Process votes when comments are added to BIP issues
  process-votes:
    if: github.event_name == 'issue_comment' && contains(github.event.issue.title, 'BIP-') && contains(github.event.comment.body, '## ðŸ¤– Vote:')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yq
          pip install PyYAML
          pip install jq

      - name: Extract BIP number
        id: bip-info
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          BIP_NUMBER=$(echo "$ISSUE_TITLE" | grep -o 'BIP-[0-9]*' | sed 's/BIP-//')
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          echo "bip_number=$BIP_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Check if voting is complete
        id: voting-status
        run: |
          # Check if voting period has ended or quorum reached
          if [[ -f "bips/active/.voting-complete-${{ steps.bip-info.outputs.bip_number }}" ]]; then
            echo "voting_complete=true" >> $GITHUB_OUTPUT
          else
            echo "voting_complete=false" >> $GITHUB_OUTPUT
          fi

      - name: Tally votes
        if: steps.voting-status.outputs.voting_complete == 'false'
        run: |
          chmod +x scripts/voting/tally_votes.sh
          ./scripts/voting/tally_votes.sh "${{ steps.bip-info.outputs.issue_number }}"

      - name: Check consensus result
        id: consensus
        run: |
          # Read the consensus result from the tally script
          if [[ -f "bips/active/.consensus-${{ steps.bip-info.outputs.bip_number }}.json" ]]; then
            APPROVED=$(jq -r '.approved' "bips/active/.consensus-${{ steps.bip-info.outputs.bip_number }}.json")
            echo "approved=$APPROVED" >> $GITHUB_OUTPUT
          else
            echo "approved=false" >> $GITHUB_OUTPUT
          fi

      - name: Create implementation branch (if approved)
        if: steps.consensus.outputs.approved == 'true'
        run: |
          chmod +x scripts/voting/create_branch.sh
          ./scripts/voting/create_branch.sh "${{ steps.bip-info.outputs.bip_number }}"

      - name: Mark voting as complete
        run: |
          touch "bips/active/.voting-complete-${{ steps.bip-info.outputs.bip_number }}"

      - name: Commit voting results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .

          # Create commit message
          COMMIT_MSG="chore: Update BIP-${BIP_NUMBER} voting results

          - Updated vote tally
          - Processed consensus calculation
          - Moved BIP to appropriate directory"

          if [[ "$APPROVED" == "true" ]]; then
            COMMIT_MSG="$COMMIT_MSG
          - Created implementation branch"
          fi

          COMMIT_MSG="$COMMIT_MSG

          Auto-generated by bip-voting.yml workflow"

          # Set variables for commit message
          BIP_NUMBER="${{ steps.bip-info.outputs.bip_number }}"
          APPROVED="${{ steps.consensus.outputs.approved }}"

          git commit -m "$COMMIT_MSG" || true
          git push || true

  # Job 3: Check for voting timeouts
  check-timeout:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yq
          pip install PyYAML
          pip install jq

      - name: Check for timed out BIPs
        run: |
          # Find all active BIPs
          for bip_file in bips/active/BIP-*.md; do
            if [[ -f "$bip_file" ]]; then
              # Extract BIP number
              bip_number=$(basename "$bip_file" | sed 's/BIP-\([0-9]*\)\.md/\1/')

              # Check if voting has timed out
              if [[ -f "bips/active/.voting-trigger-${bip_number}" ]]; then
                # Get voting start time
                start_time=$(jq -r '.triggered_at' "bips/active/.voting-trigger-${bip_number}")
                start_timestamp=$(date -d "$start_time" +%s)
                current_timestamp=$(date +%s)

                # Check if 7 days (604800 seconds) have passed
                if (( current_timestamp - start_timestamp > 604800 )); then
                  echo "BIP-${bip_number} has timed out - forcing vote tally"

                  # Extract issue number from BIP file
                  issue_number=$(grep "Issue Number:" "$bip_file" | sed 's/.*#//' || echo "")

                  if [[ -n "$issue_number" ]]; then
                    chmod +x scripts/voting/tally_votes.sh
                    ./scripts/voting/tally_votes.sh "$issue_number"
                  fi
                fi
              fi
            fi
          done

      - name: Commit timeout results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: Process timed out BIP votings

          Auto-generated by bip-voting.yml timeout check" || true
          git push || true

  # Job 4: Notify models to vote (can be triggered manually)
  notify-models:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yq
          pip install PyYAML

      - name: Generate voting notifications
        run: |
          # This would generate notifications for all enabled models
          # In a real implementation, this could:
          # 1. Send webhooks to model endpoints
          # 2. Create issues in model repositories
          # 3. Send emails/Slack notifications
          # 4. Trigger external automation systems

          echo "Generating voting notifications..."

          # List all enabled models
          yq eval '.voting.models[] | select(.enabled == true and .voting_enabled == true) | .name + " (" + .provider + ")"' .consensus/voting.yml

          echo "Notifications generated for enabled models"

      - name: Log notification
        run: |
          echo "Models have been notified to vote on pending BIPs"
          echo "Check GitHub issues for voting progress"
