name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test and Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Verify pnpm installation
        run: |
          pnpm --version
          which pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Test
        run: pnpm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Packages
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary_suffix: linux-x64
          - os: windows-latest
            binary_suffix: win32-x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Build CLI binaries
        run: |
          cd packages/crypto-utils
          npm run build
          npx pkg dist/cli.js --targets node18-${{ matrix.binary_suffix }} --output ../../dist/vote-hash-${{ matrix.binary_suffix }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vote-hash-${{ matrix.binary_suffix }}
          path: dist/vote-hash-${{ matrix.binary_suffix }}
          retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level high

  governance-validation:
    name: Governance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate governance requirements
        run: |
          # Check if vote hash service is properly exported
          node -e "
          const { VoteHashService } = require('./packages/crypto-utils/dist/index.js');
          const testVote = {
            proposalId: 'test-123',
            modelId: 'model-456',
            weight: 8,
            timestamp: new Date(),
            justification: 'Test vote'
          };
          const hash = VoteHashService.generateVoteHash(testVote);
          console.log('âœ“ Vote hash generation working:', hash.length === 64);
          "

      - name: Validate CLI tool
        run: |
          cd packages/crypto-utils
          npm run build
          node dist/cli.js --help | grep -q "CMMV-Hive Vote Hash Generator"

  release:
    name: Release
    needs: [test, build, security-audit, governance-validation]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vote-hash-linux-x64
          path: ./artifacts/

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vote-hash-win32-x64
          path: ./artifacts/

      - name: Publish to npm
        run: pnpm publish --recursive --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload release binaries
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/vote-hash-linux-x64
            artifacts/vote-hash-win32-x64
          token: ${{ secrets.GITHUB_TOKEN }}
