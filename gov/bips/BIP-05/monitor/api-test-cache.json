{
  "timestamp": 1757467533799,
  "workingProviders": [
    "openai",
    "anthropic",
    "gemini",
    "xai"
  ],
  "failedProviders": [
    {
      "provider": "openai",
      "model": "openai/gpt-4o",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "openai",
      "model": "openai/gpt-5-mini",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.0-flash",
      "reason": "Aider v0.86.1\nModel: gemini/gemini-2.0-flash with diff edit format\nGit repo: ../../../../.git with 16 files\nRepo-map: using 4096 tokens, auto refresh\nNote: in-chat filenames are always relative to the git working dir, not the \ncurrent working dir.\nCur working dir: /mnt/f/Node/cmmv-hive/gov/bips/BIP-05/monitor\nGit working dir: /mnt/f/Node/cmmv-hive\n\nTo implement this request, I believe the following files will need to be \nmodified:\n\n*   `gov/bips/BIP-05/monitor/server.js`\n*   `gov/bips/BIP-05/monitor/test-all-models.js`\n\nPlease add these files to the chat so I can provide the necessary \n*SEARCH/REPLACE* blocks.\n\nTokens: 10k sent, 82 received. Cost: $0.0010 message, $0.0010 session.\n\ngov/bips/BIP-05/monitor/server.js\n\ngov/bips/BIP-05/monitor/test-all-models.js\nTo ensure the APIs are functioning correctly, we need to modify the \n`callLLMViaAider` function in `gov/bips/BIP-05/monitor/server.js` and the \n`callModelViaAider` function in `gov/bips/BIP-05/monitor/test-all-models.js` to \ncheck for the specific response \"OK\".\n\nHere are the *SEARCH/REPLACE* blocks:\n\ngov/bips/BIP-05/monitor/server.js\n```javascript\n<<<<<<< SEARCH\n            const costInfo = typeof result === 'object' ? result.costInfo : \nnull;\n\n            if (response && !response.includes('❌') && \nresponse.toLowerCase().includes('ok')) {\n                console.log(`[API TEST] ✅ ${testModel.modelId} - WORKING`);\n\n                // Add provider to working list if not already there\n=======\n            const costInfo = typeof result === 'object' ? result.costInfo : \nnull;\n\n            if (response && !response.includes('❌') && \nresponse.toUpperCase().includes('OK')) {\n                console.log(`[API TEST] ✅ ${testModel.modelId} - WORKING`);\n\n                // Add provider to working list if not already there\n>>>>>>> REPLACE\n```\n\ngov/bips/BIP-05/monitor/test-all-models.js\n```javascript\n<<<<<<< SEARCH\n        const apiKey = process.env[config.key];\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"Responda apenas \n'Hello, API funcionando!' para confirmar conectividade.\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n=======\n        const apiKey = process.env[config.key];\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"OK\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n>>>>>>> REPLACE\n```\n\ngov/bips/BIP-05/monitor/test-all-models.js\n```javascript\n<<<<<<< SEARCH\n            return `❌ Erro: ${stderr}`;\n        }\n\n        return stdout.trim() || '✅ Resposta recebida (sem conteúdo visível)';\n        \n    } catch (error) {\n        return `❌ Erro: ${error.message}`;\n    }\n}\n=======\n            return `❌ Erro: ${stderr}`;\n        }\n\n        return stdout.trim() || '✅ Resposta recebida (sem conteúdo visível)';\n    } catch (error) {\n        return `❌ Erro: ${error.message}`;\n    }\n}\n>>>>>>> REPLACE\n```\n\nTokens: 45k sent, 650 received. Cost: $0.0047 message, $0.0058 session.\nThe LLM did not conform to the edit format.\nhttps://aider.chat/docs/troubleshooting/edit-errors.html\n\n# 1 SEARCH/REPLACE block failed to match!\n\n## SearchReplaceNoExactMatch: This SEARCH block failed to exactly match lines in\ngov/bips/BIP-05/monitor/test-all-models.js\n<<<<<<< SEARCH\n        const apiKey = process.env[config.key];\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"Responda apenas \n'Hello, API funcionando!' para confirmar conectividade.\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n=======\n        const apiKey = process.env[config.key];\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"OK\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n>>>>>>> REPLACE\n\nDid you mean to match some of these actual lines from \ngov/bips/BIP-05/monitor/test-all-models.js?\n\n```\n        const modelConfig = ALL_MODELS.aider_models[modelId];\n        if (!modelConfig) {\n            return `❌ Modelo ${modelId} não encontrado na configuração`;\n        }\n\n        const apiKey = process.env[modelConfig.key];\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"Responda apenas \n'Hello, API funcionando!' para confirmar conectividade.\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n            timeout: 30000, // 30 segundos timeout\n            env: { ...process.env }\n        });\n\n        if (stderr && stderr.includes('error')) {\n```\n\nThe SEARCH section must exactly match an existing block of lines including all \nwhite space, comments, indentation, docstrings, etc\n\n# The other 2 SEARCH/REPLACE blocks were applied successfully.\nDon't re-send them.\nJust reply with fixed versions of the block above that failed to match.\n\nYou're right, I missed some lines in the previous *SEARCH/REPLACE* block. Here's\nthe corrected version:\n\ngov/bips/BIP-05/monitor/test-all-models.js\n```javascript\n<<<<<<< SEARCH\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"Responda apenas \n'Hello, API funcionando!' para confirmar conectividade.\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n=======\n        if (!apiKey) {\n            return `❌ API key não configurada para ${modelConfig.provider}`;\n        }\n\n        // Comando aider para testar o modelo\n        const aiderCmd = `aider --model ${modelId} --yes \"OK\"`;\n        \n        const { stdout, stderr } = await execAsync(aiderCmd, {\n>>>>>>> REPLACE\n```\n\nTokens: 46k sent, 221 received. Cost: $0.0047 message, $0.01 session.\nDid not apply edit to gov/bips/BIP-05/monitor/test-all-models.js (--dry-run)"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.5-flash-lite",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-1.5-pro",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.5-pro-preview-05-06",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "xai",
      "model": "xai/grok-4",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "deepseek",
      "model": "deepseek/deepseek-chat",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "deepseek",
      "model": "deepseek/deepseek-coder",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    }
  ],
  "costReports": [
    {
      "provider": "openai",
      "model": "openai/gpt-4o-mini",
      "hasCostData": true,
      "inputTokens": 7600,
      "outputTokens": 1,
      "inputCost": 0.00058,
      "outputCost": 0,
      "totalCost": 0.00058,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:15:38.782Z"
    },
    {
      "provider": "openai",
      "model": "openai/o1-mini",
      "hasCostData": true,
      "inputTokens": 8400,
      "outputTokens": 909,
      "inputCost": 0.02,
      "outputCost": 0,
      "totalCost": 0.02,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:15:48.812Z"
    },
    {
      "provider": "openai",
      "model": "openai/gpt-4-turbo",
      "hasCostData": true,
      "inputTokens": 8200,
      "outputTokens": 2,
      "inputCost": 0.08,
      "outputCost": 0,
      "totalCost": 0.08,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:15:56.347Z"
    },
    {
      "provider": "openai",
      "model": "openai/gpt-5-nano",
      "hasCostData": true,
      "inputTokens": 9300,
      "outputTokens": 779,
      "inputCost": 0.00036,
      "outputCost": 0,
      "totalCost": 0.00036,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:12.509Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-5-haiku-latest",
      "hasCostData": true,
      "inputTokens": 9300,
      "outputTokens": 4,
      "inputCost": 0.0075,
      "outputCost": 0,
      "totalCost": 0.0075,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:18.026Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-5-sonnet-latest",
      "hasCostData": false,
      "inputTokens": null,
      "outputTokens": null,
      "inputCost": null,
      "outputCost": null,
      "totalCost": null,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:22.146Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-opus-latest",
      "hasCostData": false,
      "inputTokens": null,
      "outputTokens": null,
      "inputCost": null,
      "outputCost": null,
      "totalCost": null,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:26.335Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-4-sonnet-20250514",
      "hasCostData": true,
      "inputTokens": 9300,
      "outputTokens": 4,
      "inputCost": 0.03,
      "outputCost": 0,
      "totalCost": 0.03,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:32.415Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-4-opus-20250514",
      "hasCostData": true,
      "inputTokens": 9300,
      "outputTokens": 4,
      "inputCost": 0.14,
      "outputCost": 0,
      "totalCost": 0.14,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:38.397Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-haiku-20240307",
      "hasCostData": true,
      "inputTokens": 9300,
      "outputTokens": 4,
      "inputCost": 0.0023,
      "outputCost": 0,
      "totalCost": 0.0023,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:43.388Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-7-sonnet-20250219",
      "hasCostData": true,
      "inputTokens": 11000,
      "outputTokens": 4,
      "inputCost": 0.03,
      "outputCost": 0,
      "totalCost": 0.03,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:17:55.445Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.5-flash",
      "hasCostData": true,
      "inputTokens": 10000,
      "outputTokens": 169,
      "inputCost": 0.0043,
      "outputCost": 0,
      "totalCost": 0.0043,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:18:31.283Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-1.5-flash",
      "hasCostData": true,
      "inputTokens": 8300,
      "outputTokens": 2,
      "inputCost": 0.00062,
      "outputCost": 0,
      "totalCost": 0.00062,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:19:36.649Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-1.5-flash-8b",
      "hasCostData": true,
      "inputTokens": 8300,
      "outputTokens": 2,
      "inputCost": null,
      "outputCost": null,
      "totalCost": null,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:19:41.776Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3-mini",
      "hasCostData": true,
      "inputTokens": 7500,
      "outputTokens": 1,
      "inputCost": 0.0023,
      "outputCost": 0,
      "totalCost": 0.0023,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:22:01.825Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-code-fast-1",
      "hasCostData": true,
      "inputTokens": 7700,
      "outputTokens": 1,
      "inputCost": 0.0015,
      "outputCost": 0,
      "totalCost": 0.0015,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:22:11.920Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3",
      "hasCostData": true,
      "inputTokens": 7500,
      "outputTokens": 1,
      "inputCost": 0.02,
      "outputCost": 0,
      "totalCost": 0.02,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:22:16.772Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3-fast-beta",
      "hasCostData": true,
      "inputTokens": 9200,
      "outputTokens": 1,
      "inputCost": 0.05,
      "outputCost": 0,
      "totalCost": 0.05,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:22:21.540Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3-fast-latest",
      "hasCostData": true,
      "inputTokens": 7500,
      "outputTokens": 1,
      "inputCost": 0.04,
      "outputCost": 0,
      "totalCost": 0.04,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:23:27.562Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-2",
      "hasCostData": true,
      "inputTokens": 7600,
      "outputTokens": 1,
      "inputCost": 0.02,
      "outputCost": 0,
      "totalCost": 0.02,
      "currency": "USD",
      "testTimestamp": "2025-09-10T01:23:32.260Z"
    }
  ],
  "lastTest": "2025-09-10T01:25:33.799Z",
  "summary": {
    "totalProviders": 13,
    "workingProvidersCount": 4,
    "failedProvidersCount": 9,
    "modelsWithCostData": 18,
    "totalCostReports": 20
  }
}