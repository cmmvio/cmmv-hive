{
  "timestamp": 1757472596237,
  "workingProviders": [
    "openai",
    "anthropic",
    "gemini",
    "xai",
    "deepseek"
  ],
  "failedProviders": [
    {
      "provider": "openai",
      "model": "openai/gpt-4o",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.5-flash-lite",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-1.5-pro",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.5-pro-preview-05-06",
      "reason": "⏰ A resposta do aider demorou muito. Tente novamente."
    },
    {
      "provider": "deepseek",
      "model": "deepseek/deepseek-chat",
      "reason": "Aider v0.86.1\nModel: deepseek/deepseek-chat with diff edit format, prompt cache, infinite \noutput\nGit repo: ../../../../.git with 16 files\nRepo-map: using 4096 tokens, auto refresh\nNote: in-chat filenames are always relative to the git working dir, not the \ncurrent working dir.\nCur working dir: /mnt/f/Node/cmmv-hive/gov/bips/BIP-05/monitor\nGit working dir: /mnt/f/Node/cmmv-hive\n\nBased on the provided file summaries, the most likely files that need changes to\nhandle a simple \"OK\" response confirmation are:\n\n1. `gov/bips/BIP-05/monitor/server.js` - This seems to be the main server file \nthat handles chat messages and responses\n2. `gov/bips/BIP-05/monitor/handshake-response.js` - This might handle specific \nresponse types\n\nPlease add these files to the chat so I can propose the necessary changes.\n\nTokens: 10k sent, 3.6k cache hit, 99 received. Cost: $0.0021 message, $0.0021 \nsession.\n\ngov/bips/BIP-05/monitor/handshake-response.js\n\ngov/bips/BIP-05/monitor/server.js\nI need to modify the `handshake-response.js` file to respond with 'OK' when \ncalled. Here are the necessary changes:\n\ngov/bips/BIP-05/monitor/handshake-response.js\n```javascript\n<<<<<<< SEARCH\nfunction confirmHandshake() {\n    return \"Olá! Eu sou o modelo openai/gpt-4o-mini. Recebi sua mensagem com \nsucesso.\";\n}\n\nmodule.exports = confirmHandshake; // Export the function for use in server.js\n=======\nfunction confirmHandshake() {\n    return \"OK\";\n}\n\nmodule.exports = confirmHandshake; // Export the function for use in server.js\n>>>>>>> REPLACE\n```\n\nThis change makes the `confirmHandshake` function return \"OK\" instead of the \nlonger Portuguese message, which should satisfy the requirement to respond with \n'OK' to confirm the API is working.\n\nHowever, I need to check if this function is being used in the server.js file. \nLet me look for where `confirmHandshake` is imported and used:\n\nLooking at the server.js file, I need to find where `confirmHandshake` is \nimported and used. Since the server.js file is quite large, I'll need to search \nfor it.\n\nActually, I don't see `confirmHandshake` being imported or used in the provided \nserver.js content. This suggests that either:\n1. It's used in a different part of the file not shown\n2. It's used in a different file\n3. It's not currently being used\n\nSince the instruction is to respond with 'OK' to confirm the API is working, and\nthe `handshake-response.js` file seems to be designed for this purpose, I'll \nmake the change to that file. If there are other places where API connectivity \nis tested, they may need to be updated as well.\n\nLet me also check if there are any API test functions in server.js that might \nneed to be updated to expect 'OK' responses:\n\nI see in the `testApiConnectivity` function, there's a check for responses that \ninclude 'OK':\n```javascript\nif (response && !response.includes('❌') && \nresponse.toLowerCase().includes('ok')) {\n```\n\nThis suggests that the test is already looking for 'OK' in the response, so \nchanging `confirmHandshake` to return 'OK' should work correctly.\n\nSince the `confirmHandshake` function seems to be the appropriate place to make \nthis change, and the test is already looking for 'OK' responses, this \nmodification should be sufficient.\n\nTokens: 41k sent, 3.4k cache hit, 522 received. Cost: $0.01 message, $0.01 \nsession.\nDid not apply edit to gov/bips/BIP-05/monitor/handshake-response.js (--dry-run)"
    }
  ],
  "costReports": [
    {
      "provider": "openai",
      "model": "openai/gpt-4o-mini",
      "hasCostData": true,
      "inputTokens": 8400,
      "outputTokens": 74,
      "inputCost": 0.0013,
      "outputCost": 0,
      "totalCost": 0.0013,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:58:26.927Z"
    },
    {
      "provider": "openai",
      "model": "openai/o1-mini",
      "hasCostData": true,
      "inputTokens": 8800,
      "outputTokens": 461,
      "inputCost": 0.02,
      "outputCost": 0,
      "totalCost": 0.02,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:41:41.383Z"
    },
    {
      "provider": "openai",
      "model": "openai/gpt-4-turbo",
      "hasCostData": true,
      "inputTokens": 8500,
      "outputTokens": 2,
      "inputCost": 0.09,
      "outputCost": 0,
      "totalCost": 0.09,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:41:46.167Z"
    },
    {
      "provider": "openai",
      "model": "openai/gpt-5-mini",
      "hasCostData": true,
      "inputTokens": 9600,
      "outputTokens": 1500,
      "inputCost": 0.0054,
      "outputCost": 0,
      "totalCost": 0.0054,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:42:27.223Z"
    },
    {
      "provider": "openai",
      "model": "openai/gpt-5-nano",
      "hasCostData": true,
      "inputTokens": 9600,
      "outputTokens": 586,
      "inputCost": 0.00072,
      "outputCost": 0,
      "totalCost": 0.00072,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:42:35.519Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-5-haiku-latest",
      "hasCostData": true,
      "inputTokens": 9800,
      "outputTokens": 4,
      "inputCost": 0.0078,
      "outputCost": 0,
      "totalCost": 0.0078,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:42:40.730Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-5-sonnet-latest",
      "hasCostData": false,
      "inputTokens": null,
      "outputTokens": null,
      "inputCost": null,
      "outputCost": null,
      "totalCost": null,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:42:44.890Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-opus-latest",
      "hasCostData": false,
      "inputTokens": null,
      "outputTokens": null,
      "inputCost": null,
      "outputCost": null,
      "totalCost": null,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:42:49.128Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-4-sonnet-20250514",
      "hasCostData": true,
      "inputTokens": 9800,
      "outputTokens": 4,
      "inputCost": 0.03,
      "outputCost": 0,
      "totalCost": 0.03,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:42:54.711Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-4-opus-20250514",
      "hasCostData": true,
      "inputTokens": 9800,
      "outputTokens": 4,
      "inputCost": 0.15,
      "outputCost": 0,
      "totalCost": 0.15,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:43:00.568Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-haiku-20240307",
      "hasCostData": true,
      "inputTokens": 9800,
      "outputTokens": 4,
      "inputCost": 0.0024,
      "outputCost": 0,
      "totalCost": 0.0024,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:43:05.517Z"
    },
    {
      "provider": "anthropic",
      "model": "anthropic/claude-3-7-sonnet-20250219",
      "hasCostData": true,
      "inputTokens": 12000,
      "outputTokens": 4,
      "inputCost": 0.04,
      "outputCost": 0,
      "totalCost": 0.04,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:43:10.998Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.0-flash",
      "hasCostData": true,
      "inputTokens": 10000,
      "outputTokens": 81,
      "inputCost": 0.0011,
      "outputCost": 0,
      "totalCost": 0.0011,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:43:23.791Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-2.5-flash",
      "hasCostData": true,
      "inputTokens": 11000,
      "outputTokens": 723,
      "inputCost": 0.005,
      "outputCost": 0,
      "totalCost": 0.005,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:43:33.949Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-1.5-flash",
      "hasCostData": true,
      "inputTokens": 8700,
      "outputTokens": 2,
      "inputCost": 0.00065,
      "outputCost": 0,
      "totalCost": 0.00065,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:45:07.299Z"
    },
    {
      "provider": "gemini",
      "model": "gemini/gemini-1.5-flash-8b",
      "hasCostData": true,
      "inputTokens": 8700,
      "outputTokens": 2,
      "inputCost": null,
      "outputCost": null,
      "totalCost": null,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:45:13.284Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3-mini",
      "hasCostData": true,
      "inputTokens": 7900,
      "outputTokens": 1,
      "inputCost": 0.0024,
      "outputCost": 0,
      "totalCost": 0.0024,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:47:23.483Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-code-fast-1",
      "hasCostData": true,
      "inputTokens": 8100,
      "outputTokens": 1,
      "inputCost": 0.0016,
      "outputCost": 0,
      "totalCost": 0.0016,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:47:30.616Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3",
      "hasCostData": true,
      "inputTokens": 7900,
      "outputTokens": 1,
      "inputCost": 0.02,
      "outputCost": 0,
      "totalCost": 0.02,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:47:36.449Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3-fast-beta",
      "hasCostData": true,
      "inputTokens": 9600,
      "outputTokens": 1,
      "inputCost": 0.05,
      "outputCost": 0,
      "totalCost": 0.05,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:47:42.054Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-4",
      "hasCostData": true,
      "inputTokens": 10000,
      "outputTokens": 1,
      "inputCost": 0.03,
      "outputCost": 0,
      "totalCost": 0.03,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:48:07.375Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-3-fast-latest",
      "hasCostData": true,
      "inputTokens": 7900,
      "outputTokens": 1,
      "inputCost": 0.04,
      "outputCost": 0,
      "totalCost": 0.04,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:48:12.728Z"
    },
    {
      "provider": "xai",
      "model": "xai/grok-2",
      "hasCostData": true,
      "inputTokens": 8000,
      "outputTokens": 1,
      "inputCost": 0.02,
      "outputCost": 0,
      "totalCost": 0.02,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:48:17.395Z"
    },
    {
      "provider": "deepseek",
      "model": "deepseek/deepseek-coder",
      "hasCostData": true,
      "inputTokens": 11000,
      "outputTokens": 385,
      "inputCost": 0.0012,
      "outputCost": 0,
      "totalCost": 0.0012,
      "currency": "USD",
      "testTimestamp": "2025-09-10T02:58:49.046Z"
    }
  ],
  "lastTest": "2025-09-10T02:49:56.237Z",
  "summary": {
    "totalProviders": 10,
    "workingProvidersCount": 5,
    "failedProvidersCount": 5,
    "modelsWithCostData": 22,
    "totalCostReports": 24
  }
}